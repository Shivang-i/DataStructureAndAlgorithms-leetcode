//leetcode 137
// Given an integer array nums where:

// Every number appears three times, except one number, which appears only once,

// Find and return that unique number.


//Approch 1 using hash map
/*we will make a frequency map and will check which element has frequency 1*/
class Solution {
    public int singleNumber(int[] nums) {
        HashMap<Integer,Integer> fmap=new HashMap<>();
        for(int num:nums){
            fmap.put(num,fmap.getOrDefault(num,0)+1);
        }
        for(int num:nums){
            if(fmap.get(num)==1)
            return num;
        }
        return -1;
    }
}

//approch 2 using bit manipulation
class Solution {
    public int singleNumber(int[] nums) {
        int result = 0;

        // Loop through all 32 bits of an integer
        for (int i = 0; i < 32; i++) {
            int count = 0;

            // Count how many numbers have the i-th bit set
            for (int num : nums) {
                if (((num >> i) & 1) == 1) {
                    count++;
                }
            }

            // If the count is not a multiple of 3, the unique number has a 1 in this bit
            if (count % 3 != 0) {
                result |= (1 << i); // Set the i-th bit of result
            }
        }

        return result;
    }
}
