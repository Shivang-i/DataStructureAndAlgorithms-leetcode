//leetcode 191
/*Approch 1-Using predefine bitCount() function
 bitCount() function return number of set bit.
 */

 class Solution {
    public int hammingWeight(int n) {
        return Integer.bitCount(n);
    }
}

//Approch 2-Brain Kernighan Algorithm
class Solution {
    public int hammingWeight(int n) {
        int count = 0; // This will store the number of 1s in the binary representation

        // Loop runs until all bits are zero
        while (n > 0) {
            // Removes the rightmost 1-bit from n
            n = n & (n - 1);

            // Each time a 1-bit is removed, increment the count
            count++;
        }

        return count; // Return total number of 1-bits
    }
}
