import java.util.*;

// Weighted Graph implementation using Adjacency List
public class WeightedAdjacentListGraph {
    
    // Edge class to represent a connection (src -> dest with weight)
    static class Edge {
        int src;    // source vertex
        int dest;   // destination vertex
        int wt;     // weight of the edge
        
        public Edge(int s, int d, int w) {
            this.src = s;
            this.dest = d;
            this.wt = w;
        }
    }

    // Function to create the weighted graph
    public static void CreateGraph(ArrayList<Edge>[] graph) {
        // Initialize each index of the array with an empty ArrayList
        for (int i = 0; i < graph.length; i++) {
            graph[i] = new ArrayList<Edge>();
        }

        // Add weighted edges:
        // Example graph with 4 vertices (0,1,2,3)
        // 0 -> {2(4)}
        graph[0].add(new Edge(0, 2, 4));

        // 1 -> {2(5), 3(6)}
        graph[1].add(new Edge(1, 2, 5));
        graph[1].add(new Edge(1, 3, 6));

        // 2 -> {0(4), 1(5), 3(7)}
        graph[2].add(new Edge(2, 0, 4));
        graph[2].add(new Edge(2, 1, 5));
        graph[2].add(new Edge(2, 3, 7));

        // 3 -> {1(6), 2(7)}
        graph[3].add(new Edge(3, 1, 6));
        graph[3].add(new Edge(3, 2, 7));
    }

    public static void main(String arg[]) {
        int v = 4; // number of vertices
        // Create an array of ArrayLists to represent adjacency list
        ArrayList<Edge> graph[] = new ArrayList[v];

        // Build the graph
        CreateGraph(graph);

        // Print the weighted adjacency list
        System.out.println("Weighted Adjacency List of Graph:");
        for (int i = 0; i < v; i++) {
            System.out.print(i + " -> ");
            for (Edge e : graph[i]) {
                System.out.print("(" + e.dest + ", weight=" + e.wt + ") ");
            }
            System.out.println();
        }
    }
}
