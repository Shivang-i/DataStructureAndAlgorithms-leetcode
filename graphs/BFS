//Continuous graph 

import java.util.*;

public class BFSExample {
    
    // Edge class to represent graph edges
    static class Edge {
        int src;
        int dest;

        public Edge(int s, int d) {
            this.src = s;
            this.dest = d;
        }
    }

    // Function to create a simple graph
    public static void CreateGraph(ArrayList<Edge>[] graph) {
        for (int i = 0; i < graph.length; i++) {
            graph[i] = new ArrayList<Edge>();
        }

        // Example graph
        // 0 -> {1, 2}
        graph[0].add(new Edge(0, 1));
        graph[0].add(new Edge(0, 2));

        // 1 -> {0, 3}
        graph[1].add(new Edge(1, 0));
        graph[1].add(new Edge(1, 3));

        // 2 -> {0, 4}
        graph[2].add(new Edge(2, 0));
        graph[2].add(new Edge(2, 4));

        // 3 -> {1, 4, 5}
        graph[3].add(new Edge(3, 1));
        graph[3].add(new Edge(3, 4));
        graph[3].add(new Edge(3, 5));

        // 4 -> {2, 3, 5}
        graph[4].add(new Edge(4, 2));
        graph[4].add(new Edge(4, 3));
        graph[4].add(new Edge(4, 5));

        // 5 -> {3, 4}
        graph[5].add(new Edge(5, 3));
        graph[5].add(new Edge(5, 4));
    }

    // BFS function
    public static void bfs(ArrayList<Edge>[] graph, int start) {
        Queue<Integer> q = new LinkedList<>();
        boolean[] visited = new boolean[graph.length];

        // Start BFS from the given node
        q.add(start);
        visited[start] = true;

        while (!q.isEmpty()) {
            int curr = q.remove();
            System.out.print(curr + " "); // process the node

            // Traverse all neighbors of current node
            for (Edge e : graph[curr]) {
                if (!visited[e.dest]) {
                    q.add(e.dest);
                    visited[e.dest] = true;
                }
            }
        }
    }

    public static void main(String[] args) {
        int v = 6; // number of vertices
        ArrayList<Edge>[] graph = new ArrayList[v];

        CreateGraph(graph);

        System.out.print("BFS Traversal starting from node 0: ");
        bfs(graph, 0);
    }
}


//Discontinuous graph

import java.util.*;

public class BFSDisconnectedGraph {
    
    // Edge class to represent graph edges
    static class Edge {
        int src;
        int dest;

        public Edge(int s, int d) {
            this.src = s;
            this.dest = d;
        }
    }

    // Function to create a sample disconnected graph
    public static void CreateGraph(ArrayList<Edge>[] graph) {
        for (int i = 0; i < graph.length; i++) {
            graph[i] = new ArrayList<Edge>();
        }

        // First component: 0-1-2
        graph[0].add(new Edge(0, 1));
        graph[1].add(new Edge(1, 0));
        graph[1].add(new Edge(1, 2));
        graph[2].add(new Edge(2, 1));

        // Second component: 3-4
        graph[3].add(new Edge(3, 4));
        graph[4].add(new Edge(4, 3));

        // Node 5 is isolated (third component)
    }

    // BFS for a single connected component
    public static void bfs(ArrayList<Edge>[] graph, boolean[] visited, int start) {
        Queue<Integer> q = new LinkedList<>();

        q.add(start);
        visited[start] = true;

        while (!q.isEmpty()) {
            int curr = q.remove();
            System.out.print(curr + " "); // process node

            for (Edge e : graph[curr]) {
                if (!visited[e.dest]) {
                    q.add(e.dest);
                    visited[e.dest] = true;
                }
            }
        }
    }

    public static void main(String[] args) {
        int v = 6; // number of vertices
        ArrayList<Edge>[] graph = new ArrayList[v];
        CreateGraph(graph);

        boolean[] visited = new boolean[v];

        System.out.println("BFS Traversal for Disconnected Graph:");
        // Run BFS for every component
        for (int i = 0; i < v; i++) {
            if (!visited[i]) {
                bfs(graph, visited, i);
                System.out.println(); // separate components
            }
        }
    }
}
