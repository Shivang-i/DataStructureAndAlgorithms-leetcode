// 0->{0,2}
// 1->{1,2},{1,3}
// 2->{2,0},{2,1},{2,3}
// 3->{3,1},{3,2}

// Adjacency list is prefered because in various Algorithm we need to find the value of the neighbour of graphs which is easy in adjacency list.
import java.util.*;

// Graph implementation using Adjacency List
public class AdjacentListGraph {
    
    // Edge class to represent a connection (src -> dest)
    static class Edge {
        int src;   // source vertex
        int dest;  // destination vertex
        
        public Edge(int s, int d) {
            this.src = s;
            this.dest = d;
        }
    }

    // Function to create the graph
    public static void CreateGraph(ArrayList<Edge>[] graph) {
        // Initialize each index of the array with an empty ArrayList
        for (int i = 0; i < graph.length; i++) {
            graph[i] = new ArrayList<Edge>();
        }

        // Add edges as per given example:
        // 0 -> {2}
        graph[0].add(new Edge(0, 2));

        // 1 -> {2, 3}
        graph[1].add(new Edge(1, 2));
        graph[1].add(new Edge(1, 3));

        // 2 -> {0, 1, 3}
        graph[2].add(new Edge(2, 0));
        graph[2].add(new Edge(2, 1));
        graph[2].add(new Edge(2, 3));

        // 3 -> {1, 2}
        graph[3].add(new Edge(3, 1));
        graph[3].add(new Edge(3, 2));
    }

    public static void main(String arg[]) {
        int v = 4; // number of vertices
        // Create an array of ArrayLists to represent adjacency list
        ArrayList<Edge> graph[] = new ArrayList[v];

        // Build the graph
        CreateGraph(graph);

        // Print the adjacency list
        System.out.println("Adjacency List of Graph:");
        for (int i = 0; i < v; i++) {
            System.out.print(i + " -> ");
            for (Edge e : graph[i]) {
                System.out.print(e.dest + " ");
            }
            System.out.println();
        }
    }
}
