import java.util.Stack;

class Solution {
    /*
     Problem Statement:
     -----------------
     Given a string s consisting of '(' and ')', 
     return the minimum number of parentheses you must add to make the resulting string valid.
     
     A string is valid if:
       1. Open brackets '(' must be closed by a corresponding ')'.
       2. Close brackets ')' must have a matching '(' before them.

     Example:
       Input: s = "())"
       Output: 1
       Explanation: We need to add 1 '(' to make it valid: "(())"
    */

    public int minAddToMakeValid(String s) {
        // If the string is empty, it's already valid
        if (s.length() == 0) {
            return 0;
        }

        // Stack to keep track of unmatched parentheses
        Stack<Character> stack = new Stack<>();

        for (int i = 0; i < s.length(); i++) {
            char ch = s.charAt(i);

            // If stack is empty, push the current character
            if (stack.isEmpty()) {
                stack.push(ch);
            } else {
                // If current char is ')' and top of stack is '(', it's a matching pair
                if (ch == ')' && stack.peek() == '(') {
                    stack.pop(); // remove the matched '('
                } else {
                    // Otherwise, push the current character (either '(' or unmatched ')')
                    stack.push(ch);
                }
            }
        }

        // Stack now contains all unmatched parentheses
        // The size of the stack is the minimum number of parentheses to add
        return stack.size();
    }
}
