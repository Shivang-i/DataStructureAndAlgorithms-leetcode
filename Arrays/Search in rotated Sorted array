// leetcode- 33
// search a element in rotated sorted array

class Solution {
    public int search(int[] nums, int target) {
        int left, right, mid = -1;
        left = 0;
        right = nums.length - 1;

        // Perform binary search
        while (left <= right) {
            // Find the middle index
            mid = left + (right - left) / 2;

            // If the middle element is the target, return its index
            if (nums[mid] == target)
                return mid;

            // Check if the left half is sorted
            if (nums[left] <= nums[mid]) {
                // Check if the target is within the sorted left half
                if (nums[left] <= target && target < nums[mid]) {
                    right = mid - 1; // Move search to the left half
                } else {
                    left = mid + 1; // Move search to the right half
                }
            }
            // Else, the right half must be sorted
            else {
                // Check if the target is within the sorted right half
                if (nums[mid] < target && target <= nums[right]) {
                    left = mid + 1; // Move search to the right half
                } else {
                    right = mid - 1; // Move search to the left half
                }
            }
        }

        // If not found, return -1
        return -1;
    }
}
