//leetcode-238
class Solution {

    /**
     * Returns an array where each element is the product of all elements
     * in nums except the one at that position.
     * 
     * This is done without using division and in O(n) time.
     *
     * @param nums Input array of integers
     * @return Array of products as described
     */
    public int[] productExceptSelf(int[] nums) {
        int n = nums.length;

        // Output array that will store the result
        int[] product = new int[n];

        // Step 1: Build prefix product array
        // product[i] will store the product of all elements to the LEFT of index i
        // For index 0, there are no elements to the left, so set product[0] = 1
        product[0] = 1;

        for (int i = 1; i < n; i++) {
            product[i] = product[i - 1] * nums[i - 1];
            // Example: product[2] = nums[0] * nums[1]
        }

        // Step 2: Multiply with suffix products
        // rightProduct will store the product of all elements to the RIGHT of the current index
        int rightProduct = 1;

        for (int i = n - 1; i >= 0; i--) {
            // Multiply the left product (already in product[i]) with the right product
            product[i] = product[i] * rightProduct;

            // Update rightProduct for the next iteration to the left
            rightProduct *= nums[i];
        }

        // The array now contains the product of all elements except self
        return product;
    }
}
