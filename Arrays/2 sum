/*Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.
Example 1:

Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].
Example 2:

Input: nums = [3,2,4], target = 6
Output: [1,2]
Example 3:

Input: nums = [3,3], target = 6
Output: [0,1]*/

/*Approch 1-
 brute force approch:
 we can solve this problem with two loops.
 step 1-traverese the loop 1 from i=0 to size-2
 and loop 2 from j=i+1 to size-1
 step 2-now check the condition if(nums[i]+nums[j]==targer)
 then assign value of i and j(indexes) in answer array (which in this case is a)and break
step 3-now return the array a.

Time complexity-O(n^2)
*/

class Solution {
    public int[] twoSum(int[] nums, int target) {
        int i,j;
        int[]a=new int[2];
        for (i=0;i<nums.length-1;i++)
        {
            for(j=i+1;j<nums.length;j++)

            {
                if(nums[i]+nums[j]==target)
                {
                    a[0]=i;
                    a[1]=j;
                    break;
                }
            }
        }
        return(a);
    }  
}

/*Approch 2-Using Hash map
 optimized Approch

 we will create a map to store the indexes of elements 

 Step 1- create a hash map
 step 2- traverese the array
 step 3-now find the complement=target- current element
 step 4- check if complement exist in map or not if existed return the value of complement from map and index of current element.
 step 5- put the current elemet with its index in the map.
step 6- Do return a default array [-1,-1]in case if con dition is not satisfied.
 */

 class Solution {
    public int[] twoSum(int[] nums, int target) {
    Map<Integer, Integer> map = new HashMap<>(); 

    for (int i = 0; i < nums.length; i++) {
        int complement = target - nums[i];
        if (map.containsKey(complement)) {
            return new int[]{map.get(complement), i};
        }
        map.put(nums[i], i); 
    }
    return new int[]{-1, -1}; 
    }
}