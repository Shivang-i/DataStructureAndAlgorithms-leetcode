//leetcode 1781
// The beauty of a string is the difference in frequencies between the most frequent and least frequent characters.

// For example, the beauty of "abaacc" is 3 - 1 = 2.
// Given a string s, return the sum of beauty of all of its substrings.


class Solution {

    // Method to calculate the "beauty" of a given frequency map of characters
    public int beauty(HashMap<Character, Integer> map) {
        int maxFreq = -1;  // Initialize maximum frequency
        int minFreq = Integer.MAX_VALUE;  // Initialize minimum frequency

        // Iterate through all characters in the map
        for (char i : map.keySet()) {
            int val = map.get(i);

            // Update maximum frequency
            if (val > maxFreq) {
                maxFreq = val;
            }

            // Update minimum frequency
            if (val < minFreq) {
                minFreq = val;
            }
        }

        // Return the difference between max and min frequencies
        return maxFreq - minFreq;
    }

    // Main method to calculate the total beauty sum of all substrings
    public int beautySum(String s) {
        int size = s.length();  // Length of the input string
        int sum = 0;  // To store the total beauty sum

        // Outer loop to consider all substrings starting at index i
        for (int i = 0; i < size; i++) {
            HashMap<Character, Integer> map = new HashMap<>();  // Character frequency map for current substring

            // Inner loop to extend the substring ending at index j
            for (int j = i; j < size; j++) {
                char ch = s.charAt(j);

                // Update frequency of current character
                map.put(ch, map.getOrDefault(ch, 0) + 1);

                // Add the beauty of the current substring to the total sum
                sum += beauty(map);
            }
        }

        // Return the total beauty sum of all substrings
        return sum;
    }
}
