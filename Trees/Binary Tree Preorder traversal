//leetcode 144

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

 //recursive solution(implicit stack)
class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> list =new ArrayList<>();//to store result
        preOrderHelper( root,list);//list is passed as argument to update 
        return list;
    }
    static void preOrderHelper(TreeNode root,List<Integer>result){
        if(root==null){
            return;
        }
        result.add(root.val);//add root value to null
        preOrderHelper(root.left,result);//recursive call to left
        preOrderHelper(root.right,result);//recursive call to right
    }
}



/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

 //iterative Approch
class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> list =new ArrayList<>();
        Stack<TreeNode> stack=new Stack<>();//Explicit stack
        if(root==null)
        return list;
        stack.push(root);
        while(!stack.isEmpty()){
            TreeNode curr=stack.pop();
            list.add(curr.val);//add root value to list
            if(curr.right!=null){
                stack.push(curr.right);
            }
            if(curr.left!=null){
                stack.push(curr.left);//left is travere first so it should be at top of stack
            }
        }
        return list;
    }
}