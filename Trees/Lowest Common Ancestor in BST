//leetcode 235
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */

class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        // Store the values of p and q for easy access
        int pValue = p.val;
        int qValue = q.val;

        // Traverse the tree starting from the root
        while (root != null) {
            
            // If both p and q are smaller than root,
            // then LCA lies in the left subtree
            if (pValue < root.val && qValue < root.val) {
                root = root.left;
            }
            // If both p and q are greater than root,
            // then LCA lies in the right subtree
            else if (pValue > root.val && qValue > root.val) {
                root = root.right;
            }
            // If p and q are on different sides of root
            // OR one of them is equal to root,
            // then root is the lowest common ancestor
            else {
                return root;
            }
        }
        
        // This return is just for safety â€” it should never hit in a valid BST
        return null;
    }
}
