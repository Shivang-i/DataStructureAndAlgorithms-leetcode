//leetcode 1448
/**
 * Objective:
 * Count the number of "good nodes" in a binary tree.
 * A node is considered good if on the path from the root to that node,
 * there are no nodes with a value greater than the current node's value.
 * 
 * In other words, a node is good if its value is greater than or equal to 
 * the maximum value seen so far along the path from the root to this node.
 */

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int goodNodes(TreeNode root) {
        int count = helper(root, Integer.MIN_VALUE);
        return count;
    }

    int helper(TreeNode root, int currentMax) {
        // base case
        if (root == null) {
            return 0;
        }

        int left = helper(root.left, Math.max(root.val, currentMax));
        int right = helper(root.right, Math.max(root.val, currentMax));
        int result = left + right;

        if (root.val >= currentMax) {
            result++; // Good node count
        }
        return result;
    }
}
