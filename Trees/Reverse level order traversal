//gfg


/*
class Node
{
    int data;
    Node left, right;

    Node(int item)
    {
        data = item;
        left = right = null;
    }
}
*/

//Approch-1
/*The code performs a reverse level order traversal of a binary tree.
It uses:
A queue to perform standard level-order traversal.
A stack to reverse the order of nodes.
The right child is enqueued before the left to ensure that when popped from the stack, the left child appears before the right (matching reverse level order).
Finally, the result is built by popping all node values from the stack.
 */
class Tree {
    public ArrayList<Integer> reverseLevelOrder(Node root) {
        // This list will store the final reverse level order traversal result
        ArrayList<Integer> result = new ArrayList<>();

        // If the tree is empty, return an empty list
        if (root == null) {
            return result;
        }

        // Stack is used to reverse the order of level order traversal
        Stack<Integer> stack = new Stack<>();

        // Queue is used for standard level order traversal (BFS)
        Queue<Node> queue = new LinkedList<>();
        queue.add(root);

        // Perform modified level order traversal
        while (!queue.isEmpty()) {
            Node curr = queue.poll(); // Get the front node
            stack.push(curr.data);    // Push its data to the stack

            // Enqueue right child first, so left child is processed later (to reverse the order)
            if (curr.right != null) {
                queue.add(curr.right);
            }

            // Enqueue left child
            if (curr.left != null) {
                queue.add(curr.left);
            }
        }

        // Pop all items from the stack to get reverse level order
        while (!stack.isEmpty()) {
            result.add(stack.pop());
        }

        return result;
    }
}


//Approch 2 -same as BFT just use result.add(0,data)and make sure right tree is added first in queue


/*
class Node
{
    int data;
    Node left, right;

    Node(int item)
    {
        data = item;
        left = right = null;
    }
}
*/

class Tree {
    public ArrayList<Integer> reverseLevelOrder(Node root) {
        // code here
        ArrayList<Integer>result=new ArrayList<>();
        if(root==null){
            return result;
        }
        Queue<Node> queue=new LinkedList<>();
        queue.add(root);
        while(!queue.isEmpty()){
            Node curr=queue.remove();
            result.add(0,curr.data);
            if (curr.right != null) {
                queue.add(curr.right);
            }
             if (curr.left != null) {
                queue.add(curr.left);
            }
        }
        return result;
    }
}
