//leetcode 987
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> verticalTraversal(TreeNode root) {
        List<List<Integer>> bigList=new ArrayList<>();
        TreeMap<Integer,List<Pair<Integer,Integer>>> map=new TreeMap<>();//with distance from origin store a list of pair of level and value of node.
        helper(map,root,0,0);
        //finally we need to convert map to list 
        for(Integer key:map.keySet()){
            List<Pair<Integer,Integer>>list=map.get(key);
            list.sort((a,b)->(a.getKey().compareTo(b.getKey())==0)?a.getValue().compareTo(b.getValue()):a.getKey().compareTo(b.getKey()));

            List<Integer> smallList=new ArrayList<>();
            for(Pair<Integer,Integer> pairs:list){
                smallList.add(pairs.getValue());
            }
            bigList.add(smallList);
        }
        return bigList;
    }

static void helper(TreeMap<Integer,List<Pair<Integer,Integer>>> map,TreeNode root,int level,int distance){
    if(root==null)
    {
        return;
    }
    if(map.get(distance)==null){
        map.put(distance,new ArrayList<>());
    }
    map.get(distance).add(new Pair<>(level,root.val));
    helper(map,root.left,level+1,distance-1);//when we move towards the left level will increase and distance will decrease.
    helper(map,root.right,level+1,distance+1);//when we move towards the right level will increase and distance will alsi increase.
}
}
