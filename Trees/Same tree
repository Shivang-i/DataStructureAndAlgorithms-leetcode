//leetcode 100
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

class Solution {
    /**
     * Checks if two binary trees are identical.
     * Two trees are the same if they have:
     *  1. The same structure.
     *  2. The same node values in corresponding positions.
     *
     * @param p root of the first tree
     * @param q root of the second tree
     * @return true if both trees are the same, false otherwise
     */
    public boolean isSameTree(TreeNode p, TreeNode q) {
        // Case 1: If both nodes are null, they are the same at this branch
        if (p == null && q == null) {
            return true;
        }
        
        // Case 2: If only one node is null, trees differ
        if (p == null || q == null) {
            return false;
        }
        
        // Case 3: If values don't match, trees differ
        if (p.val != q.val) {
            return false;
        }
        
        // Recursively check the left and right subtrees
        boolean left = isSameTree(p.left, q.left);
        boolean right = isSameTree(p.right, q.right);
        
        // Trees are the same only if both subtrees are identical
        return left && right;
    }
}
