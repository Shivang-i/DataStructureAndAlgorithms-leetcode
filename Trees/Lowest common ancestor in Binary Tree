//leetcode -236

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        // Base case: found one of the nodes or reached null
    if (root == null || root == p || root == q) {
        return root;
    }

    // Search left and right subtrees
    TreeNode left = lowestCommonAncestor(root.left, p, q);
    TreeNode right = lowestCommonAncestor(root.right, p, q);

    // If both sides return non-null, current node is the LCA
    if (left != null && right != null) {
        return root;
    }

    // Otherwise return the non-null side
    return (left != null) ? left : right;
}
        
    
}