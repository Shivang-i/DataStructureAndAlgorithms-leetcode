//leetcode 701

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

class Solution {

    /**
     * Inserts a new value into a Binary Search Tree (BST).
     *
     * @param root The root node of the BST
     * @param val  The value to insert
     * @return The root node of the BST after insertion
     */
    public TreeNode insertIntoBST(TreeNode root, int val) {
        
        // Base case: if the tree/subtree is empty, create a new node
        if (root == null) {
            TreeNode node = new TreeNode(val);
            return node;
        }

        // If the value is smaller than the current node's value,
        // insert into the left subtree
        if (val < root.val) {
            root.left = insertIntoBST(root.left, val);
        }
        // Otherwise, insert into the right subtree
        else {
            root.right = insertIntoBST(root.right, val);
        }

        // Return the unchanged root pointer
        return root;
    }
}
