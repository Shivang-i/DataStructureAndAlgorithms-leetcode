//leetcode 145
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

 //Approch 1-recursive
class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> list=new ArrayList<>();
        postOrderHelper(root,list);
        return list;
    }
    static void postOrderHelper(TreeNode root,List<Integer>result){
        if(root==null){
            return;
        }
        postOrderHelper(root.left,result);
        postOrderHelper(root.right,result);
        result.add(root.val);

    }
}


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
//Approch-2 Iterative
class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
     List<Integer> result=new ArrayList<>();
     if(root==null)
     {
        return result;
     }
     Stack<TreeNode> stack=new Stack<>();   
     stack.push(root);
     while(!stack.isEmpty())
     {
        TreeNode curr=stack.pop();
        result.add(0,curr.val);
        if(curr.left!=null){
            stack.push(curr.left);
        }
        if(curr.right!=null){
           stack.push(curr.right);
        }
     }
     return result;
    }
}
