//leetcode 669
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

class Solution {
    public TreeNode trimBST(TreeNode root, int low, int high) {
        // Base case: if the current node is null, return null
        if (root == null) {
            return root;
        }

        // If the current node's value is greater than high,
        // all nodes in its right subtree will also be > high (BST property)
        // → trim and return the left subtree
        if (root.val > high) {
            return trimBST(root.left, low, high);
        }

        // If the current node's value is less than low,
        // all nodes in its left subtree will also be < low (BST property)
        // → trim and return the right subtree
        if (root.val < low) {
            return trimBST(root.right, low, high);
        }

        // Otherwise, this node is within range → keep it,
        // but recursively trim its left and right subtrees
        root.left = trimBST(root.left, low, high);
        root.right = trimBST(root.right, low, high);

        // Return the possibly updated root node
        return root;
    }
}
