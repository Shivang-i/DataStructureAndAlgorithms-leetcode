//leetcode-236
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */

class Solution {
    /**
     * Finds the Lowest Common Ancestor (LCA) of two nodes in a binary tree.
     * The LCA of two nodes p and q is defined as the lowest node
     * in the tree that has both p and q as descendants
     * (where we allow a node to be a descendant of itself).
     *
     * @param root the root of the binary tree
     * @param p the first target node
     * @param q the second target node
     * @return the lowest common ancestor of p and q
     */
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        // Base case: 
        // If the current node is null OR matches one of the target nodes (p or q),
        // then return it immediately.
        if (root == null || root == p || root == q) {
            return root;
        }

        // Recursively search for p and q in the left and right subtrees
        TreeNode left = lowestCommonAncestor(root.left, p, q);
        TreeNode right = lowestCommonAncestor(root.right, p, q);

        // If both left and right are non-null, it means p and q were found 
        // in different branches, so the current node is their lowest common ancestor.
        if (left != null && right != null) {
            return root;
        }

        // If only one side is non-null, propagate that side upward 
        // (either LCA found below, or one of the nodes found)
        return (left != null) ? left : right;
    }
}
