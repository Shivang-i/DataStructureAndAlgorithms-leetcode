/*
Objective:
-----------
This is the classic "Climbing Stairs" problem.

Problem statement:
- You are climbing a staircase with `n` steps.
- Each time, you can climb either 1 step or 2 steps.
- Goal: Find the total number of distinct ways to reach the top.

Approach:
----------
We use recursion with memoization (top-down DP).
- At step `n`, the total ways = ways from (n-1) + ways from (n-2).
- This is because you can reach step `n` either:
    1. By taking a single step from (n-1).
    2. By taking a double step from (n-2).
- To avoid recomputation, we store results in a dp array.
*/

import java.util.Arrays;

class Solution {
    
    // Recursive helper function with memoization
    public int helper(int n, int[] dp) {
        // Base case: If n is 0 or 1, there is exactly 1 way
        // n=0 → no steps left, considered 1 valid way
        // n=1 → only one step, exactly 1 way
        if (n <= 1) {
            dp[n] = 1;
            return 1;
        }

        // If already computed, return the stored result
        if (dp[n] != -1) return dp[n];

        // Recursive relation:
        // Ways(n) = Ways(n-1) + Ways(n-2)
        return dp[n] = (helper(n - 1, dp) + helper(n - 2, dp));
    }

    // Main function: entry point for the solution
    public int climbStairs(int n) {
        // Initialize dp array with -1 to indicate uncomputed states
        int[] dp = new int[n + 1];
        Arrays.fill(dp, -1);

        // Start solving from step n
        return helper(n, dp);
    }
}
